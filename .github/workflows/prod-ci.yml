# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Prod Java CI with Gradle And Deploy AWS

on:
  release:
    types: [published]
    tags: "v*.*.*"

env:
  DOCKER_NAME: new-pters/alogic
  IMAGE_NAME: 059221848742.dkr.ecr.ap-northeast-2.amazonaws.com/new-pters-dev
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_DEFAULT_REGION: ap-northeast-2
  AWS_ECS_CLUSTER_NAME: new-pters-dev
  AWS_ECS_SERVICE_NAME: new-pters-dev
  AWS_ECS_CONTAINER_NAME: new-pters-dev
  AWS_ECS_TASK_DEFINITION_NAME: new-pters-dev
  AWS_ECR_REPOSITORY: new-pters-dev

permissions:
  contents: read

jobs:
  build:
#    if: ${{ startsWith(github.ref, 'refs/tags/v') }}

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: '1.8'
        clean: true

    - name: Gradle Caching
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    - name: Build with Gradlex
      run: ./gradlew clean build

#    - name: Build with Gradle
#      uses: gradle/gradle-build-action@67421db6bd0bf253fb4bd25b31ebb98943c375e1
#      with:
#        arguments: build

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1.7.0
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_DEFAULT_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1.5.3

    - name: Crate version tag
      run: |
        echo "VERSION_TAG=${GITHUB_REF#refs/tags/}" >> ${GITHUB_ENV}
        echo "${GITHUB_ENV}
        echo "${GITHUB_REF}

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      run: |
        ./gradlew docker -x test
        echo "Release docker image:$ECR_REGISTRY/$AWS_ECR_REPOSITORY:$VERSION_TAG"
        docker tag ${DOCKER_NAME}:latest $ECR_REGISTRY/$AWS_ECR_REPOSITORY:$VERSION_TAG
        docker push $ECR_REGISTRY/$AWS_ECR_REPOSITORY:$VERSION_TAG
        echo "image=$ECR_REGISTRY/$AWS_ECR_REPOSITORY:$VERSION_TAG" >> $GITHUB_OUTPUT

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1.1.3
      with:
        task-definition: task-definition.json
        container-name: ${{ env.AWS_ECS_CONTAINER_NAME }}
        image: ${{ steps.build-image.outputs.image }}

    - name: Deploy AWS ECS
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1.4.11
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.AWS_ECS_SERVICE_NAME }}
        cluster: ${{ env.AWS_ECS_CLUSTER_NAME }}
        wait-for-service-stability: true
